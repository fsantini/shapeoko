#!/usr/bin/env python 
#
# gsh: transmit gcode commands to grbl on an arduino via a usb serial
# connection on OSX.
#
import sys
import os.path
from optparse import OptionParser
import logging
# path hack so we can import from sibling lib directory. 
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from lib.grblstuff import hello_grbl, do_command, wait_motion, setup_logging

def log(logger='gsh'):
    return logging.getLogger(logger)

def main():

    parser = OptionParser(usage="""
    %prog [options] [gcode, gcode, ...]

    Connect to the grbl device at /dev/tty.usbmodem*.
    Prior to any transmission, settings for grbl will be read from
    ./grbl.conf or /usr/local/etc/grbl.conf if these exist and are not
    overridden by the --conf or --noconf options.

    Following any commandline options, comma-separated gcode commands
    may be specified and will be sent after any initialization. 
    If no gcode commands are specified, gsh enters interactive mode,
    sending each line entered on stdin and printing each response to 
    stdout.
    """)
    parser.add_option("--dev", default = "/dev/tty.usbmodem*",
                      help="filepath pattern for grbl serial device"),
    parser.add_option("-c", "--conf", 
                      help="config file to send to grbl at startup")
    parser.add_option("-n", "--noconf", action="store_true",
                      help="send no configuration to grble at startup")
    parser.add_option("-v", "--verbose", action="store_true",
                      help="log grbl input and output")
    parser.add_option("-L", "--logfile", default=None,
                      help="send log stream to this file (default stderr)")
    parser.add_option("--settings", action="store_true",
                      help="display grbl settings, suitable for your conf file")
    (opts, args) = parser.parse_args()

    setup_logging(info=opts.verbose, path=opts.logfile)
    conf = opts.conf
    if not conf and not opts.noconf:
        if os.path.exists("grbl.conf"):
            conf = "grbl.conf"
        elif os.path.exists("/usr/local/etc/grbl.conf"):
            conf = "/usr/local/etc/grbl.conf"
    grbl = hello_grbl(opts.dev, conf)
    if not grbl:
        sys.exit(0)
    if opts.settings:
        settings = do_command(grbl, "$")
        print settings
    if len(args):
        for command in " ".join(args).split(","):
            do_command(grbl, command)
    else:
        print "enter gcode commands, one per line, and a blank line when done"
        while True:
            print ">",
            line = raw_input()
            if line:
                print do_command(grbl, line, wait=True)
            else:
                print "bye!"
                break
    wait_motion(grbl)
    grbl.close()
    log().info("done!")

if __name__ == "__main__":
    sys.exit(main())

