#!/usr/bin/env python
# optimizes a gcode file removing useless up-down Z-moves. Used for a 3D surface generated by heekscad

import fileinput
import re
import math
from gcodeconv import GCodeConverter

lastG = 'G0'
lastX = 'X0'
lastY = 'Y0'
lastZ = 'Z0'

lastXVal = 0;
lastYVal = 0;
lastZVal = 0;

lastNonSuppX = 0;
lastNonSuppY = 0;
lastNonSuppZ = 0;

curXVal = 0;
curYVal = 0;
curZVal = 0;

minZ = 1000
localmaxZ = 1000
suppressedLines = 0
totLines = 0
totSuppressedLines = 0
suppressedCode = False
runGCode = True

totDistance = 0
totDistanceNew = 0

zfound = False
xfound = False
yfound = False

layerSize = 1

converter = GCodeConverter()

def isZMove():
  return zfound and not (xfound or yfound)

def isXYMove():
  return (xfound or yfound) and not zfound

def getVal(moveCode):
  return float(moveCode[1:])

def getDistance(move1, move2):
  return abs(getVal(move1) - getVal(move2))

for line in fileinput.input():
  line = converter.convert(line)
  totLines = totLines+1
  
  if line.startswith('G00') or line.startswith('G01'):
    
    lastXVal = getVal(lastX)
    lastYVal = getVal(lastY)
    lastZVal = getVal(lastZ)
    
    xre = re.search('X[0-9.-]+', line)
    xfound = False
    if xre is not None:
      lastX = xre.group(0)
      xfound = True
    yre = re.search('Y[0-9.-]+', line)
    yfound = False
    if yre is not None:
      lastY = yre.group(0)
      yfound = True
    zre = re.search('Z[0-9.-]+', line)
    zfound = False
    if zre is not None:
      lastZ = zre.group(0)
      zfound = True
    
    curXVal = getVal(lastX)
    curYVal = getVal(lastY)
    curZVal = getVal(lastZ)
    
    totDistance = totDistance + math.sqrt((curXVal - lastXVal)**2 + (curYVal - lastYVal)**2 + (curZVal - lastZVal)**2)
    
    curZ = curZVal
    
    if curZ <= minZ+layerSize:
      minZ = curZ
      runGCode = True
    elif curZ > minZ+layerSize:
      if curZ > localmaxZ: localmaxZ = curZ
      suppressedLines = suppressedLines + 1
      totSuppressedLines = totSuppressedLines + 1
      if not suppressedCode:
        # this is run only the first time code is suppressed
        lastNonSuppX = curXVal
        lastNonSuppY = curYVal
        lastNonSuppZ = curZVal
      suppressedCode = True
      runGCode = False # suppress the GCode
      
    if runGCode:
      if suppressedCode: # there is some suppressed code: move the tool to highest Z
        print "; " + str(suppressedLines) + " lines were suppressed here"
        print "G00 Z" + str(localmaxZ)
        print "G00 " + lastX + " " + lastY
        suppressedCode = False
        suppressedLines = 0
        totDistanceNew = totDistanceNew + math.fabs(lastNonSuppZ - localmaxZ) + math.sqrt((curXVal - lastNonSuppX)**2 + (curYVal - lastNonSuppY)**2) + math.fabs(curZVal - localmaxZ)
      print line
      localmaxZ = minZ
      totDistanceNew = totDistanceNew + math.sqrt((curXVal - lastXVal)**2 + (curYVal - lastYVal)**2 + (curZVal - lastZVal)**2)
    #else:
      # print "; " + line
      
  else: # not a G-Line
    print line
    
print "; Suppressed " + str(totSuppressedLines) + " lines of " + str(totLines) + " original lines (" + str(int(totSuppressedLines*100/totLines)) + "%)"
print "; Old travel distance: " + str(int(totDistance)) + " New distance: " + str(int(totDistanceNew)) + " (" + str(int(totDistanceNew*100/totDistance)) + "%)"